import 'package:flutter/material.dart';
import 'package:table_calendar/table_calendar.dart';

class JournalEntry {
  final DateTime date;
  final String text;
  final String emoji;
  final String mood;

  JournalEntry({
    required this.date,
    required this.text,
    required this.emoji,
    required this.mood,
  });
}

class JournalWidget extends StatefulWidget {
  const JournalWidget({super.key});

  @override
  State<JournalWidget> createState() => _JournalWidgetState();
}

class _JournalWidgetState extends State<JournalWidget>
    with TickerProviderStateMixin {
  final TextEditingController _textController = TextEditingController();
  final Map<DateTime, JournalEntry> _entries = {};
  DateTime _selectedDay = DateTime.now();
  DateTime _focusedDay = DateTime.now();
  String _selectedEmoji = 'üòä';
  String _selectedMood = 'Happy';
  late AnimationController _saveAnimationController;
  late Animation<double> _saveAnimation;

  final Map<String, String> _moodEmojis = {
    'Happy': 'üòä',
    'Sad': 'üò¢',
    'Anxious': 'üò∞',
    'Angry': 'üò†',
    'Excited': 'ü§©',
    'Calm': 'üòå',
    'Stressed': 'üòì',
    'Confused': 'üòï',
    'Grateful': 'üôè',
    'Lonely': 'ü•∫',
  };

  final Map<String, Color> _moodColors = {
    'Happy': const Color(0xFFFFD700),
    'Sad': const Color(0xFF4A90E2),
    'Anxious': const Color(0xFFFF8C42),
    'Angry': const Color(0xFFE74C3C),
    'Excited': const Color(0xFFE91E63),
    'Calm': const Color(0xFF2ECC71),
    'Stressed': const Color(0xFFE67E22),
    'Confused': const Color(0xFF95A5A6),
    'Grateful': const Color(0xFF9B59B6),
    'Lonely': const Color(0xFF3F51B5),
  };

  final List<String> _moods = [
    'Happy',
    'Sad',
    'Anxious',
    'Angry',
    'Excited',
    'Calm',
    'Stressed',
    'Confused',
    'Grateful',
    'Lonely',
  ];

  @override
  void initState() {
    super.initState();
    _saveAnimationController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    );
    _saveAnimation = Tween<double>(begin: 0, end: 1).animate(
      CurvedAnimation(
        parent: _saveAnimationController,
        curve: Curves.elasticOut,
      ),
    );
    _addSampleEntries();
  }

  void _addSampleEntries() {
    final today = DateTime.now();
    final yesterday = today.subtract(const Duration(days: 1));
    final twoDaysAgo = today.subtract(const Duration(days: 2));

    _entries[_normalizeDate(today)] = JournalEntry(
      date: today,
      text:
          "Today was a wonderful day! I felt so loved and supported by my friends. üíï",
      emoji: "üòä",
      mood: "Happy",
    );

    _entries[_normalizeDate(yesterday)] = JournalEntry(
      date: yesterday,
      text:
          "Feeling a bit anxious about school tomorrow, but I'm trying to stay positive and remember that I'm stronger than I think! üåü",
      emoji: "üò∞",
      mood: "Anxious",
    );

    _entries[_normalizeDate(twoDaysAgo)] = JournalEntry(
      date: twoDaysAgo,
      text:
          "Had a rough day. Someone was mean online, but I talked to my friend about it and felt much better. I'm grateful for good friends! ü§ó",
      emoji: "üò¢",
      mood: "Sad",
    );
  }

  DateTime _normalizeDate(DateTime date) {
    return DateTime(date.year, date.month, date.day);
  }

  @override
  void dispose() {
    _textController.dispose();
    _saveAnimationController.dispose();
    super.dispose();
  }

  void _saveEntry() {
    if (_textController.text.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(6),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.2),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Text('ü§ó', style: TextStyle(fontSize: 18)),
              ),
              const SizedBox(width: 12),
              const Expanded(
                child: Text(
                  'Don\'t forget to share how your day went!',
                  style: TextStyle(fontSize: 15, fontWeight: FontWeight.w500),
                ),
              ),
            ],
          ),
          backgroundColor: const Color(0xFFFF8C42),
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          margin: const EdgeInsets.all(16),
          elevation: 8,
        ),
      );
      return;
    }

    setState(() {
      _entries[_normalizeDate(_selectedDay)] = JournalEntry(
        date: _selectedDay,
        text: _textController.text.trim(),
        emoji: _selectedEmoji,
        mood: _selectedMood,
      );
    });

    _saveAnimationController.forward().then((_) {
      _saveAnimationController.reset();
    });

    _textController.clear();
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(6),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Text('üéâ', style: TextStyle(fontSize: 18)),
            ),
            const SizedBox(width: 12),
            const Expanded(
              child: Text(
                'Your precious memory has been saved! ‚ú®',
                style: TextStyle(fontSize: 15, fontWeight: FontWeight.w500),
              ),
            ),
          ],
        ),
        backgroundColor: const Color(0xFF2ECC71),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        margin: const EdgeInsets.all(16),
        elevation: 8,
      ),
    );
  }

  void _selectDay(DateTime selectedDay, DateTime focusedDay) {
    setState(() {
      _selectedDay = selectedDay;
      _focusedDay = focusedDay;
      _textController.clear();

      final normalizedDay = _normalizeDate(selectedDay);
      if (_entries.containsKey(normalizedDay)) {
        final entry = _entries[normalizedDay]!;
        _textController.text = entry.text;
        _selectedEmoji = entry.emoji;
        _selectedMood = entry.mood;
      } else {
        _selectedEmoji = 'üòä';
        _selectedMood = 'Happy';
      }
    });
  }

  JournalEntry? _getEntryForDay(DateTime day) {
    return _entries[_normalizeDate(day)];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      appBar: AppBar(
        title: const Text(
          'Journal',
          style: TextStyle(
            fontSize: 20,
            fontWeight: FontWeight.bold,
            color: Color(0xFF2C3E50),
          ),
        ),
        backgroundColor: Colors.white,
        foregroundColor: const Color(0xFF2C3E50),
        elevation: 0,
        shadowColor: Colors.black.withOpacity(0.1),
        surfaceTintColor: Colors.transparent,
        leading: IconButton(
          icon: const Icon(
            Icons.arrow_back_ios,
            color: Color(0xFF2C3E50),
            size: 24,
          ),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Column(
            children: [
              // Enhanced Calendar Section
              Container(
                margin: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.08),
                      blurRadius: 20,
                      spreadRadius: 0,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Padding(
                  padding: const EdgeInsets.all(16),
                  child: TableCalendar<JournalEntry>(
                    firstDay: DateTime.utc(2024, 1, 1),
                    lastDay: DateTime.utc(2030, 12, 31),
                    focusedDay: _focusedDay,
                    selectedDayPredicate: (day) => isSameDay(_selectedDay, day),
                    onDaySelected: _selectDay,
                    onPageChanged: (focusedDay) {
                      _focusedDay = focusedDay;
                    },
                    calendarStyle: CalendarStyle(
                      selectedDecoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFF667eea), Color(0xFF764ba2)],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFF667eea).withOpacity(0.3),
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      todayDecoration: BoxDecoration(
                        gradient: const LinearGradient(
                          colors: [Color(0xFFffeaa7), Color(0xFFfab1a0)],
                          begin: Alignment.topLeft,
                          end: Alignment.bottomRight,
                        ),
                        shape: BoxShape.circle,
                        boxShadow: [
                          BoxShadow(
                            color: const Color(0xFFffeaa7).withOpacity(0.3),
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      weekendTextStyle: const TextStyle(
                        color: Color(0xFFe17055),
                        fontWeight: FontWeight.w600,
                      ),
                      defaultTextStyle: const TextStyle(
                        color: Color(0xFF2d3436),
                        fontWeight: FontWeight.w500,
                      ),
                      outsideDaysVisible: false,
                      cellMargin: const EdgeInsets.all(4),
                    ),
                    headerStyle: const HeaderStyle(
                      formatButtonVisible: false,
                      titleCentered: true,
                      titleTextStyle: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF2C3E50),
                      ),
                      leftChevronIcon: Icon(
                        Icons.chevron_left,
                        color: Color(0xFF667eea),
                        size: 28,
                      ),
                      rightChevronIcon: Icon(
                        Icons.chevron_right,
                        color: Color(0xFF667eea),
                        size: 28,
                      ),
                    ),
                    calendarBuilders: CalendarBuilders(
                      markerBuilder: (context, day, events) {
                        final entry = _getEntryForDay(day);
                        if (entry != null) {
                          return Positioned(
                            bottom: 1,
                            child: Container(
                              padding: const EdgeInsets.all(2),
                              decoration: BoxDecoration(
                                color: Colors.white,
                                borderRadius: BorderRadius.circular(6),
                                boxShadow: [
                                  BoxShadow(
                                    color: Colors.black.withOpacity(0.1),
                                    blurRadius: 4,
                                    offset: const Offset(0, 1),
                                  ),
                                ],
                              ),
                              child: Text(
                                entry.emoji,
                                style: const TextStyle(fontSize: 10),
                              ),
                            ),
                          );
                        }
                        return null;
                      },
                    ),
                  ),
                ),
              ),

              // Enhanced Journal Entry Section
              Container(
                margin: const EdgeInsets.fromLTRB(16, 0, 16, 16),
                decoration: BoxDecoration(
                  color: Colors.white,
                  borderRadius: BorderRadius.circular(20),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.08),
                      blurRadius: 20,
                      spreadRadius: 0,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Padding(
                  padding: const EdgeInsets.all(24),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Enhanced Date Header
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 8,
                        ),
                        decoration: BoxDecoration(
                          gradient: const LinearGradient(
                            colors: [Color(0xFF667eea), Color(0xFF764ba2)],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: Text(
                          '${_selectedDay.day}/${_selectedDay.month}/${_selectedDay.year}',
                          style: const TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                      ),

                      const SizedBox(height: 24),

                      // Enhanced Mood Selection
                      const Text(
                        'How are you feeling today?',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF2C3E50),
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Enhanced Mood Picker
                      Wrap(
                        spacing: 10,
                        runSpacing: 10,
                        children:
                            _moods.map((mood) {
                              final emoji = _moodEmojis[mood]!;
                              final isSelected = _selectedMood == mood;
                              final moodColor = _moodColors[mood]!;

                              return GestureDetector(
                                onTap: () {
                                  setState(() {
                                    _selectedMood = mood;
                                    _selectedEmoji = emoji;
                                  });
                                },
                                child: AnimatedContainer(
                                  duration: const Duration(milliseconds: 200),
                                  curve: Curves.easeInOut,
                                  padding: const EdgeInsets.symmetric(
                                    horizontal: 16,
                                    vertical: 10,
                                  ),
                                  decoration: BoxDecoration(
                                    color:
                                        isSelected
                                            ? moodColor.withOpacity(0.15)
                                            : const Color(0xFFF8F9FA),
                                    borderRadius: BorderRadius.circular(25),
                                    border: Border.all(
                                      color:
                                          isSelected
                                              ? moodColor
                                              : const Color(0xFFE9ECEF),
                                      width: isSelected ? 2 : 1.5,
                                    ),
                                    boxShadow:
                                        isSelected
                                            ? [
                                              BoxShadow(
                                                color: moodColor.withOpacity(
                                                  0.3,
                                                ),
                                                blurRadius: 8,
                                                offset: const Offset(0, 2),
                                              ),
                                            ]
                                            : null,
                                  ),
                                  child: Row(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Text(
                                        emoji,
                                        style: const TextStyle(fontSize: 18),
                                      ),
                                      const SizedBox(width: 8),
                                      Text(
                                        mood,
                                        style: TextStyle(
                                          fontSize: 14,
                                          fontWeight: FontWeight.w600,
                                          color:
                                              isSelected
                                                  ? moodColor
                                                  : const Color(0xFF6C757D),
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              );
                            }).toList(),
                      ),

                      const SizedBox(height: 24),

                      // Enhanced Journal Writing Section
                      const Text(
                        'Write about your day...',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Color(0xFF2C3E50),
                        ),
                      ),
                      const SizedBox(height: 16),

                      // Enhanced Text Input
                      Container(
                        height: 160,
                        decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(16),
                          border: Border.all(
                            color: const Color(0xFFE9ECEF),
                            width: 1.5,
                          ),
                          color: const Color(0xFFFAFAFA),
                        ),
                        child: TextField(
                          controller: _textController,
                          maxLines: null,
                          expands: true,
                          textAlignVertical: TextAlignVertical.top,
                          style: const TextStyle(
                            fontSize: 15,
                            color: Color(0xFF2C3E50),
                            height: 1.5,
                          ),
                          decoration: const InputDecoration(
                            hintText: 'What happened today? How do you feel?',
                            hintStyle: TextStyle(
                              color: Color(0xFF6C757D),
                              fontSize: 15,
                            ),
                            border: InputBorder.none,
                            contentPadding: EdgeInsets.all(16),
                          ),
                        ),
                      ),

                      const SizedBox(height: 24),

                      // Enhanced Save Button
                      Container(
                        width: double.infinity,
                        height: 100,
                        margin: const EdgeInsets.only(top: 8),
                        child: ElevatedButton(
                          onPressed: _saveEntry,
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.transparent,
                            foregroundColor: Colors.white,
                            padding: const EdgeInsets.symmetric(vertical: 24),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(20),
                            ),
                            elevation: 0,
                            shadowColor: Colors.transparent,
                          ),
                          child: Ink(
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                colors: [Color(0xFF667eea), Color(0xFF764ba2)],
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                              ),
                              borderRadius: BorderRadius.circular(20),
                              boxShadow: [
                                BoxShadow(
                                  color: const Color(
                                    0xFF667eea,
                                  ).withOpacity(0.3),
                                  blurRadius: 12,
                                  offset: const Offset(0, 4),
                                ),
                              ],
                            ),
                            child: Container(
                              alignment: Alignment.center,
                              child: const Text(
                                'Save Entry',
                                style: TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
